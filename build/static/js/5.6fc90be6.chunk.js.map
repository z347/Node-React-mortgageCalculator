{"version":3,"sources":["data/api/url-info.ts","store/actions/get-list.action.ts","pages/Banks/components/List/styles.tsx","pages/Banks/components/List/EmptyList.tsx","store/actions/delete-from-list.action.ts","pages/Banks/components/List/ButtonDelete.tsx","store/actions/edit-bank.action.ts","pages/Banks/components/List/FormEdit.tsx","pages/Banks/components/List/ButtonEdit.tsx","pages/Banks/components/List/List.tsx","pages/Banks/components/ButtonCreate/style.tsx","pages/Banks/components/ButtonCreate/ButtonCreate.tsx","pages/Banks/components/ButtonCancel/style.tsx","pages/Banks/components/ButtonCancel/ButtonCancel.tsx","store/actions/create-new-bank.action.ts","pages/Banks/components/FormCreate/styles.tsx","pages/Banks/components/FormCreate/Form.tsx","pages/Banks/components/FormCreate/Container.tsx","pages/Banks/Banks.page.tsx"],"names":["ApiUrlInfo","Object","freeze","prefix","banksInfo","deleteBank","requestGetListWithBanks","dispatch","a","type","GET_LIST_REQUEST_IS_LOADING","loading","fetch","method","cache","headers","response","json","answer","console","log","ok","data","GET_LIST_REQUEST_IS_SUCCESS","payload","listIsError","GET_LIST_REQUEST_IS_ERROR","error","useStyles","makeStyles","theme","root","width","margin","display","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","wrapper","flexDirection","marginTop","container","alignItems","paragraph","modal","justifyContent","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","minWidth","button","float","EmptyList","classes","className","requestDeleteOneBankFromList","bankId","DELETE_BANK_REQUEST_IS_LOADING","status","DELETE_BANK_REQUEST_IS_SUCCESS","delete","deleteBankIsError","DELETE_BANK_REQUEST_IS_ERROR","ButtonDelete","useDispatch","handleClick","event","preventDefault","IconButton","aria-label","onClick","editRequest","EDIT_BANK_REQUEST_IS_LOADING","body","JSON","stringify","EDIT_BANK_REQUEST_IS_SUCCESS","edit","editBankIsError","EDIT_BANK_REQUEST_IS_ERROR","FormEdit","item","useForm","register","handleSubmit","errors","submitHandler","id","_id","autoComplete","onSubmit","TextField","label","name","variant","defaultValue","inputRef","required","Alert","severity","interestRate","maximumLoan","minimumDownPayment","loanTerm","Button","color","size","startIcon","ButtonEdit","useState","open","setOpen","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","BanksList","list","listJSX","map","Accordion","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","ButtonCreate","common","white","main","light","ButtonCancel","creationRequest","CREATE_BANK_IS_LOADING","CREATE_BANK_IS_SUCCESS","success","creationIsError","CREATE_BANK_IS_ERROR","grey","flexGrow","height","title","marginBottom","FormTask","textAlign","verticalAlign","FormCreateBank","target","reset","ContainerForm","Container","maxWidth","component","Paper","elevation","Grid","justify","gutterBottom","BanksPage","useEffect","useSelector","state","createBank","setCreateBank","prevState","buttons","length","form","requestProcessing","Spinner"],"mappings":"gKAAaA,EAAaC,OAAOC,OAAO,CACtCC,OAAQ,OACRC,UAAW,cACXC,WAAY,U,QCUNF,EAAsBH,EAAtBG,OAAQC,EAAcJ,EAAdI,UAKhB,SAASE,IACP,8CAAO,WAAOC,GAAP,iBAAAC,EAAA,sEAEHD,EAqBG,CACLE,KAAMC,IACNC,SAAS,IAzBJ,SAIoBC,MAAMT,EAASC,EAAW,CAC/CS,OAAQ,MACRC,MAAO,WACPC,QAAS,CAAE,eAAgB,qCAP1B,cAIGC,EAJH,gBAS4BA,EAASC,OATrC,OASGC,EATH,OAWHC,QAAQC,IAAIF,GAEZF,EAASK,GAAKd,GAgBGe,EAhBoBJ,EAiBlC,CACLT,KAAMc,IACNZ,SAAS,EACTa,QAASF,KApByCf,EAASkB,KAbtD,kDAeHlB,EAASkB,KAfN,kCA6BT,IAAuBH,IA7Bd,qBAAP,sDAqCF,SAASG,IACP,MAAO,CACLhB,KAAMiB,IACNf,SAAS,EACTgB,OAAO,G,oBC1DLC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,MACPC,OAAQ,aAER,8BAA+B,CAC7BC,QAAS,UAGbC,QAAS,CACPC,SAAUN,EAAMO,WAAWC,QAAQ,IACnCC,WAAYT,EAAMO,WAAWG,mBAE/BC,QAAS,CACPP,QAAS,OACTQ,cAAe,cACfV,MAAO,OACPW,UAAW,QAEbC,UAAW,CACTV,QAAS,OACTQ,cAAe,SACfG,WAAY,SACZF,UAAW,QAEbG,UAAW,CACTV,SAAUN,EAAMO,WAAWC,QAAQ,KAErCS,MAAO,CACLb,QAAS,OACTW,WAAY,SACZG,eAAgB,UAElBC,MAAO,CACLC,gBAAiBpB,EAAMqB,QAAQC,WAAWH,MAC1CI,OAAQ,iBACRC,UAAWxB,EAAMyB,QAAQ,GACzBC,QAAS1B,EAAM2B,QAAQ,EAAG,EAAG,GAC7BC,SAAU,SAEZC,OAAQ,CACNC,MAAO,QACPjB,UAAW,Y,OCxCTkB,EAAgB,WACpB,IAAMC,EAAUlC,IAEhB,OACE,qBAAKmC,UAAWD,EAAQlB,UAAxB,SACE,mBAAGmB,UAAWD,EAAQhB,UAAtB,wC,yFCGE3C,EAAuBH,EAAvBG,OAAQE,EAAeL,EAAfK,WAKhB,SAAS2D,EAA6BC,GACpC,8CAAO,WAAO1D,GAAP,eAAAC,EAAA,sEAEHD,EAmBG,CACLE,KAAMyD,IACNvD,SAAS,IAvBJ,SAIoBC,MAAM,GAAD,OAAIT,GAAJ,OAAaE,EAAb,YAA2B4D,GAAU,CAC/DpD,OAAQ,SACRC,MAAO,aANN,QAIGE,EAJH,QASMK,IAA0B,MAApBL,EAASmD,OACpB5D,EAkBD,CACLE,KAAM2D,IACNzD,SAAS,EACT0D,QAAQ,IApBF9D,EAAS+D,KAXV,gDAaH/D,EAAS+D,KAbN,yDAAP,sDAmCF,SAASA,IACP,MAAO,CACL7D,KAAM8D,IACN5D,SAAS,EACTgB,OAAO,GC7CX,IAAM6C,EAA8B,SAAC,GAAyB,IAAvBlD,EAAsB,EAAtBA,KAC/Bf,EAAWkE,cAEXC,EAAW,uCAAG,WAAOC,GAAP,SAAAnE,EAAA,6DAClBmE,EAAMC,iBADY,SAEZrE,EAASyD,EAA6B1C,IAF1B,uBAGZf,EAASD,KAHG,2CAAH,sDAMjB,OACE,cAACuE,EAAA,EAAD,CAAYC,aAAW,SAASC,QAASL,EAAzC,SACE,cAAC,IAAD,O,2GCVEvE,EAAsBH,EAAtBG,OAAQC,EAAcJ,EAAdI,UAKhB,SAAS4E,EAAY1D,GACnB,8CAAO,WAAOf,GAAP,SAAAC,EAAA,sEAEHD,EAmBG,CACLE,KAAMwE,IACNtE,SAAS,IAvBJ,SAIoBC,MAAMT,EAASC,EAAW,CAC/CS,OAAQ,QACRC,MAAO,WACPC,QAAS,CAAE,eAAgB,mCAC3BmE,KAAMC,KAAKC,UAAU9D,KARpB,cAWMD,GAAKd,EAiBX,CACLE,KAAM4E,IACN1E,SAAS,EACT2E,MAAM,IApB0C/E,EAASgF,KAXpD,gDAaHhF,EAASgF,KAbN,yDAAP,sDAmCF,SAASA,IACP,MAAO,CACL9E,KAAM+E,IACN7E,SAAS,EACTgB,OAAO,GCzCX,IAAM8D,EAA0B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAC3BnF,EAAWkE,cACXX,EAAUlC,IAFuC,EAGZ+D,cAAnCC,EAH+C,EAG/CA,SAAUC,EAHqC,EAGrCA,aAAcC,EAHuB,EAGvBA,OAE1BC,EAAa,uCAAG,WAAOzE,EAAWqD,GAAlB,SAAAnE,EAAA,6DACpBmE,EAAMC,iBAENtD,EAAK0E,GAAKN,EAAKO,IAHK,SAId1F,EAASyE,EAAY1D,IAJP,uBAKdf,EAASD,KALK,2CAAH,wDAQnB,OACE,uBAAM4F,aAAa,MAAMC,SAAUN,EAAaE,GAAhD,UACE,cAACK,EAAA,EAAD,CACEC,MAAM,cACNL,GAAG,OACHM,KAAK,OACL7F,KAAK,OACL8F,QAAQ,WACRC,aAAcd,EAAKY,KACnBG,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOQ,MAAQ,cAACK,EAAA,EAAD,CAAOC,SAAS,QAAhB,mCAEhB,cAACR,EAAA,EAAD,CACEC,MAAM,kBACNL,GAAG,eACHM,KAAK,eACL7F,KAAK,SACL8F,QAAQ,WACRC,aAAcd,EAAKmB,aACnBJ,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOe,cAAgB,cAACF,EAAA,EAAD,CAAOC,SAAS,QAAhB,uCAExB,cAACR,EAAA,EAAD,CACEC,MAAM,iBACNL,GAAG,cACHM,KAAK,cACL7F,KAAK,SACL8F,QAAQ,WACRC,aAAcd,EAAKoB,YACnBL,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOgB,aAAe,cAACH,EAAA,EAAD,CAAOC,SAAS,QAAhB,sCAEvB,cAACR,EAAA,EAAD,CACEC,MAAM,yBACNL,GAAG,qBACHM,KAAK,qBACL7F,KAAK,SACL8F,QAAQ,WACRC,aAAcd,EAAKqB,mBACnBN,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOgB,aAAe,cAACH,EAAA,EAAD,CAAOC,SAAS,QAAhB,8CAEvB,cAACR,EAAA,EAAD,CACEC,MAAM,cACNL,GAAG,WACHM,KAAK,WACL7F,KAAK,SACL8F,QAAQ,WACRC,aAAcd,EAAKsB,SACnBP,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOkB,UAAY,cAACL,EAAA,EAAD,CAAOC,SAAS,QAAhB,mCAEpB,8BACE,cAACK,EAAA,EAAD,CACEV,QAAQ,YACRW,MAAM,UACNC,KAAK,QACLpD,UAAWD,EAAQH,OACnByD,UAAW,cAAC,IAAD,IACX3G,KAAK,SANP,wBClFF4G,EAA4B,SAAC,GAAyB,IAAvB3B,EAAsB,EAAtBA,KAC7B5B,EAAUlC,IADyC,EAEjC0F,oBAAS,GAFwB,mBAElDC,EAFkD,KAE5CC,EAF4C,KAOzD,OACE,qCACE,cAAC3C,EAAA,EAAD,CAAYC,aAAW,OAAOC,QALf,kBAAMyC,GAAQ,IAK7B,SACE,cAAC,IAAD,MAGF,cAACC,EAAA,EAAD,CACEC,kBAAgB,yBAChBC,mBAAiB,+BACjB5D,UAAWD,EAAQf,MACnBwE,KAAMA,EACNK,QAbc,kBAAMJ,GAAQ,IAc5BK,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACbC,QAAS,KATb,SAYE,cAACC,EAAA,EAAD,CAAMC,GAAIZ,EAAV,SACE,sBAAKxD,UAAWD,EAAQb,MAAxB,UACE,oBAAI+C,GAAG,yBAAP,4BACA,cAAC,EAAD,CAAUN,KAAMA,eCzBtB0C,EAA2B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAC5BvE,EAAUlC,IAEV0G,EAAUD,EAAKE,KAAI,SAAC7C,GAAD,OACvB,eAAC8C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,WAAY,cAAC,IAAD,IACZC,gBAAc,kBACd3C,GAAG,iBAHL,SAKE,eAAC4C,EAAA,EAAD,CAAY7E,UAAWD,EAAQ3B,QAA/B,mBAA+CuD,EAAKY,UAEtD,eAACuC,EAAA,EAAD,WACE,eAACD,EAAA,EAAD,6BAA4BlD,EAAKmB,aAAjC,QACA,eAAC+B,EAAA,EAAD,4BAA2BlD,EAAKoB,YAAhC,QACA,eAAC8B,EAAA,EAAD,oCAAmClD,EAAKqB,mBAAxC,QACA,eAAC6B,EAAA,EAAD,yBAAwBlD,EAAKsB,SAA7B,aACA,sBAAKjD,UAAWD,EAAQrB,QAAxB,UACE,cAAC,EAAD,CAAcnB,KAAMoE,EAAKO,MACzB,cAAC,EAAD,CAAYP,KAAMA,YAfRA,EAAKO,QAqBvB,OACE,sBAAKlC,UAAWD,EAAQ/B,KAAxB,UACE,mDACCuG,M,qBC7CD1G,GAAYC,aAAW,iBAAO,CAClCe,UAAW,CACTV,QAAS,OACTQ,cAAe,SACfG,WAAY,SACZF,UAAW,YCGTmG,GAA8B,SAAC,GAAgC,IAA9BpE,EAA6B,EAA7BA,YAC/BZ,EAAUlC,KAEhB,OACE,qBAAKmC,UAAWD,EAAQlB,UAAxB,SACE,cAACqE,EAAA,EAAD,CACEV,QAAQ,YACRW,MAAM,UACNC,KAAK,QACLC,UAAW,cAAC,KAAD,IACXrC,QAASL,EALX,yBCbA9C,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCc,UAAW,CACTV,QAAS,OACTQ,cAAe,SACfG,WAAY,SACZF,UAAW,QAEbZ,KAAM,CACJmF,MAAOpF,EAAMqB,QAAQ4F,OAAOC,MAC5B9F,gBAAiBpB,EAAMqB,QAAQxB,MAAMsH,KAErC,UAAW,CACT/F,gBAAiBpB,EAAMqB,QAAQxB,MAAMuH,YCLrCC,GAA8B,SAAC,GAAgC,IAA9BzE,EAA6B,EAA7BA,YAC/BZ,EAAUlC,KAEhB,OACE,qBAAKmC,UAAWD,EAAQlB,UAAxB,SACE,cAACqE,EAAA,EAAD,CACElD,UAAWD,EAAQ/B,KACnBwE,QAAQ,YACRY,KAAK,QACLpC,QAASL,EAJX,uB,sCCDEvE,GAAsBH,EAAtBG,OAAQC,GAAcJ,EAAdI,UAKhB,SAASgJ,GAAgB9H,GACvB,8CAAO,WAAOf,GAAP,SAAAC,EAAA,sEAEHD,EAmBG,CACLE,KAAM4I,KACN1I,SAAS,IAvBJ,SAIoBC,MAAMT,GAASC,GAAW,CAC/CS,OAAQ,OACRC,MAAO,WACPC,QAAS,CAAE,eAAgB,mCAC3BmE,KAAMC,KAAKC,UAAU9D,KARpB,cAWMD,GAAKd,EAiBX,CACLE,KAAM6I,KACN3I,SAAS,EACT4I,SAAS,IApBuChJ,EAASiJ,MAXpD,gDAaHjJ,EAASiJ,MAbN,yDAAP,sDAmCF,SAASA,KACP,MAAO,CACL/I,KAAMgJ,KACN9I,SAAS,EACTgB,OAAO,GCxDX,IAAMC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCc,UAAW,CACTX,OAAQH,EAAM2B,QAAQ,GACtBP,gBAAiBpB,EAAMqB,QAAQuG,KAAK,MAEtCzG,MAAO,CACL0G,SAAU,EACVC,OAAQ,OACR1G,gBAAiB,WAEnB2G,MAAO,CACL5H,OAAQH,EAAM2B,QAAQ,GACtBqG,aAAchI,EAAM2B,QAAQ,KAE9BsG,SAAU,CACRC,UAAW,SACXC,cAAe,SACfjI,MAAO,OACP,UAAW,CACTC,OAAQH,EAAM2B,QAAQ,GACtBzB,MAAO,OAET,aAAc,CACZW,UAAWb,EAAM2B,QAAQ,GACzBqG,aAAchI,EAAM2B,QAAQ,IAC5BzB,MAAO,MACP4H,OAAQ,QAEV,wBAAyB,CACvB1H,QAAS,cACTF,MAAO,YClBPkI,GAAqB,WACzB,IAAM3J,EAAWkE,cACXX,EAAUlC,KAFe,EAIY+D,cAAnCC,EAJuB,EAIvBA,SAAUC,EAJa,EAIbA,aAAcC,EAJD,EAICA,OAE1BC,EAAa,uCAAG,WAAOzE,EAA8BqD,GAArC,SAAAnE,EAAA,6DACpBmE,EAAMC,iBADc,SAEdrE,EAAS6I,GAAgB9H,IAFX,uBAGdf,EAASD,KAHK,OAIpBqE,EAAMwF,OAAOC,QAJO,2CAAH,wDAOnB,OACE,mCACE,uBAAMrG,UAAWD,EAAQiG,SAAU5D,SAAUN,EAAaE,GAA1D,UACE,cAACK,EAAA,EAAD,CACEC,MAAM,cACNL,GAAG,OACHM,KAAK,OACL7F,KAAK,OACL8F,QAAQ,WACRE,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOQ,MAAQ,cAACK,EAAA,EAAD,CAAOC,SAAS,QAAhB,mCAEhB,cAACR,EAAA,EAAD,CACEC,MAAM,kBACNL,GAAG,eACHM,KAAK,eACL7F,KAAK,SACL8F,QAAQ,WACRE,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOe,cAAgB,cAACF,EAAA,EAAD,CAAOC,SAAS,QAAhB,uCAExB,cAACR,EAAA,EAAD,CACEC,MAAM,iBACNL,GAAG,cACHM,KAAK,cACL7F,KAAK,SACL8F,QAAQ,WACRE,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOgB,aAAe,cAACH,EAAA,EAAD,CAAOC,SAAS,QAAhB,sCAEvB,cAACR,EAAA,EAAD,CACEC,MAAM,yBACNL,GAAG,qBACHM,KAAK,qBACL7F,KAAK,SACL8F,QAAQ,WACRE,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOgB,aAAe,cAACH,EAAA,EAAD,CAAOC,SAAS,QAAhB,8CAEvB,cAACR,EAAA,EAAD,CACEC,MAAM,cACNL,GAAG,WACHM,KAAK,WACL7F,KAAK,SACL8F,QAAQ,WACRE,SAAUb,EAAS,CACjBc,UAAU,MAGbZ,EAAOkB,UAAY,cAACL,EAAA,EAAD,CAAOC,SAAS,QAAhB,mCAEpB,cAACK,EAAA,EAAD,CAAQV,QAAQ,YAAYY,KAAK,QAAQD,MAAM,UAAUzG,KAAK,SAA9D,0BCjFF4J,GAAoB,WACxB,IAAMvG,EAAUlC,KAEhB,OACE,cAAC0I,GAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAAC3B,EAAA,EAAD,CAAY4B,UAAU,OAAOzG,UAAWD,EAAQlB,UAAhD,SACE,cAAC6H,GAAA,EAAD,CAAO1G,UAAWD,EAAQb,MAAOyH,UAAW,EAA5C,SACE,eAACC,GAAA,EAAD,CAAM/H,WAAS,EAACgI,QAAQ,SAAxB,UACE,cAAChC,EAAA,EAAD,CAAYrC,QAAQ,KAAKiE,UAAU,KAAKK,cAAY,EAAC9G,UAAWD,EAAQ+F,MAAxE,sCAGA,cAAC,GAAD,cCsBGiB,UA7BO,WACpB,IAAMvK,EAAWkE,cAEjBsG,qBAAU,kBAAWxK,EAASD,OAA4B,CAACC,IAHjC,MAIGyK,aAAY,SAACC,GAAD,OAAsBA,EAAM5C,QAA7D1H,EAJkB,EAIlBA,QAASa,EAJS,EAITA,QAJS,EAMU8F,oBAAkB,GAN5B,mBAMnB4D,EANmB,KAMPC,EANO,KAQpBzG,EAAc,kBAAMyG,GAAc,SAACC,GAAD,OAAgBA,MAElDC,EAAUH,EACd,cAAC,GAAD,CAAcxG,YAAaA,IAE3B,cAAC,GAAD,CAAcA,YAAaA,IAGvB2D,EAAO7G,EAAQ8J,OAAS,EAAI,cAAC,EAAD,CAAWjD,KAAM7G,IAAc,cAAC,EAAD,IAC3D+J,EAAOL,EAAa,cAAC,GAAD,IAAoB,KACxCM,EAAoB7K,EAAU,cAAC8K,EAAA,EAAD,IAAcpD,EAElD,OACE,qCACGmD,EACAH,EACAE","file":"static/js/5.6fc90be6.chunk.js","sourcesContent":["export const ApiUrlInfo = Object.freeze({\r\n  prefix: '/api',\r\n  banksInfo: '/banks-info',\r\n  deleteBank: '/bank',\r\n});\r\n","import { ApiUrlInfo } from 'data/api/url-info';\r\nimport {\r\n  GET_LIST_REQUEST_IS_LOADING,\r\n  GET_LIST_REQUEST_IS_SUCCESS,\r\n  GET_LIST_REQUEST_IS_ERROR,\r\n  IGetListIsLoading,\r\n  IGetListIsSuccess,\r\n  IGetListIsError,\r\n  ListType,\r\n  ThunkActionType,\r\n  ThunkDispatchType,\r\n} from '../types/get-list.types';\r\n\r\nconst { prefix, banksInfo } = ApiUrlInfo;\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-expressions */\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\n\r\nfunction requestGetListWithBanks(): ThunkActionType {\r\n  return async (dispatch: ThunkDispatchType): Promise<void> => {\r\n    try {\r\n      dispatch(listIsLoading());\r\n\r\n      const response = await fetch(prefix + banksInfo, {\r\n        method: 'GET',\r\n        cache: 'no-cache',\r\n        headers: { 'Content-Type': 'application/json; charset=UTF-8' },\r\n      });\r\n      const answer: ListType = await response.json();\r\n\r\n      console.log(answer);\r\n\r\n      response.ok ? dispatch(listIsSuccess(answer)) : dispatch(listIsError());\r\n    } catch (e) {\r\n      dispatch(listIsError());\r\n    }\r\n  };\r\n}\r\n\r\n/* eslint-enable */\r\n\r\nfunction listIsLoading(): IGetListIsLoading {\r\n  return {\r\n    type: GET_LIST_REQUEST_IS_LOADING,\r\n    loading: true,\r\n  };\r\n}\r\n\r\nfunction listIsSuccess(data: ListType): IGetListIsSuccess {\r\n  return {\r\n    type: GET_LIST_REQUEST_IS_SUCCESS,\r\n    loading: false,\r\n    payload: data,\r\n  };\r\n}\r\n\r\nfunction listIsError(): IGetListIsError {\r\n  return {\r\n    type: GET_LIST_REQUEST_IS_ERROR,\r\n    loading: false,\r\n    error: true,\r\n  };\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport { requestGetListWithBanks, listIsLoading, listIsSuccess, listIsError };\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '75%',\r\n    margin: '100px auto',\r\n\r\n    '& .MuiAccordionDetails-root': {\r\n      display: 'block',\r\n    },\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  wrapper: {\r\n    display: 'flex',\r\n    flexDirection: 'row-reverse',\r\n    width: '100%',\r\n    marginTop: '40px',\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    marginTop: '3rem',\r\n  },\r\n  paragraph: {\r\n    fontSize: theme.typography.pxToRem(25),\r\n  },\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    minWidth: '500px',\r\n  },\r\n  button: {\r\n    float: 'right',\r\n    marginTop: '25px',\r\n  },\r\n}));\r\n\r\nexport { useStyles };\r\n","import { FC } from 'react';\r\n\r\nimport { useStyles } from './styles';\r\n\r\nconst EmptyList: FC = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <p className={classes.paragraph}>List of banks is empty.</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { EmptyList };\r\n","import { ApiUrlInfo } from 'data/api/url-info';\r\nimport {\r\n  DELETE_BANK_REQUEST_IS_ERROR,\r\n  DELETE_BANK_REQUEST_IS_LOADING,\r\n  DELETE_BANK_REQUEST_IS_SUCCESS,\r\n  IDeleteBankIsError,\r\n  IDeleteBankIsLoading,\r\n  IDeleteBankIsSuccess,\r\n  ThunkActionType,\r\n  ThunkDispatchType,\r\n} from '../types/delete-from-list.types';\r\n\r\nconst { prefix, deleteBank } = ApiUrlInfo;\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-expressions */\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\n\r\nfunction requestDeleteOneBankFromList(bankId: string): ThunkActionType {\r\n  return async (dispatch: ThunkDispatchType): Promise<void> => {\r\n    try {\r\n      dispatch(deleteBankIsLoading());\r\n\r\n      const response = await fetch(`${prefix}${deleteBank}:${bankId}`, {\r\n        method: 'DELETE',\r\n        cache: 'no-cache',\r\n      });\r\n\r\n      response.ok && response.status === 200\r\n        ? dispatch(deleteBankIsSuccess())\r\n        : dispatch(deleteBankIsError());\r\n    } catch (e) {\r\n      dispatch(deleteBankIsError());\r\n    }\r\n  };\r\n}\r\n\r\n/* eslint-enable */\r\n\r\nfunction deleteBankIsLoading(): IDeleteBankIsLoading {\r\n  return {\r\n    type: DELETE_BANK_REQUEST_IS_LOADING,\r\n    loading: true,\r\n  };\r\n}\r\n\r\nfunction deleteBankIsSuccess(): IDeleteBankIsSuccess {\r\n  return {\r\n    type: DELETE_BANK_REQUEST_IS_SUCCESS,\r\n    loading: false,\r\n    delete: true,\r\n  };\r\n}\r\n\r\nfunction deleteBankIsError(): IDeleteBankIsError {\r\n  return {\r\n    type: DELETE_BANK_REQUEST_IS_ERROR,\r\n    loading: false,\r\n    error: true,\r\n  };\r\n}\r\n\r\nexport {\r\n  requestDeleteOneBankFromList,\r\n  deleteBankIsLoading,\r\n  deleteBankIsSuccess,\r\n  deleteBankIsError,\r\n};\r\n","import { FC, MouseEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { requestDeleteOneBankFromList } from 'store/actions/delete-from-list.action';\r\nimport { requestGetListWithBanks } from 'store/actions/get-list.action';\r\n\r\ntype PropTypes = {\r\n  data: string;\r\n};\r\n\r\nconst ButtonDelete: FC<PropTypes> = ({ data }: PropTypes) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = async (event: MouseEvent<HTMLButtonElement>) => {\r\n    event.preventDefault();\r\n    await dispatch(requestDeleteOneBankFromList(data));\r\n    await dispatch(requestGetListWithBanks());\r\n  };\r\n\r\n  return (\r\n    <IconButton aria-label=\"delete\" onClick={handleClick}>\r\n      <DeleteIcon />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nexport { ButtonDelete };\r\n","import { ApiUrlInfo } from 'data/api/url-info';\r\nimport { IEditBankArguments } from 'types/handlers/edit-bank.arguments';\r\nimport {\r\n  EDIT_BANK_REQUEST_IS_LOADING,\r\n  EDIT_BANK_REQUEST_IS_SUCCESS,\r\n  EDIT_BANK_REQUEST_IS_ERROR,\r\n  IEditIsLoading,\r\n  IEditIsSuccess,\r\n  IEditIsError,\r\n  ThunkActionType,\r\n  ThunkDispatchType,\r\n} from '../types/edit-bank.types';\r\n\r\nconst { prefix, banksInfo } = ApiUrlInfo;\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-expressions */\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\n\r\nfunction editRequest(data: IEditBankArguments): ThunkActionType {\r\n  return async (dispatch: ThunkDispatchType): Promise<void> => {\r\n    try {\r\n      dispatch(editBankIsLoading());\r\n\r\n      const response = await fetch(prefix + banksInfo, {\r\n        method: 'PATCH',\r\n        cache: 'no-cache',\r\n        headers: { 'Content-Type': 'application/json; charset=UTF-8' },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      response.ok ? dispatch(editBankIsSuccess()) : dispatch(editBankIsError());\r\n    } catch (e) {\r\n      dispatch(editBankIsError());\r\n    }\r\n  };\r\n}\r\n\r\n/* eslint-enable */\r\n\r\nfunction editBankIsLoading(): IEditIsLoading {\r\n  return {\r\n    type: EDIT_BANK_REQUEST_IS_LOADING,\r\n    loading: true,\r\n  };\r\n}\r\n\r\nfunction editBankIsSuccess(): IEditIsSuccess {\r\n  return {\r\n    type: EDIT_BANK_REQUEST_IS_SUCCESS,\r\n    loading: false,\r\n    edit: true,\r\n  };\r\n}\r\n\r\nfunction editBankIsError(): IEditIsError {\r\n  return {\r\n    type: EDIT_BANK_REQUEST_IS_ERROR,\r\n    loading: false,\r\n    error: true,\r\n  };\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport { editRequest, editBankIsLoading, editBankIsSuccess, editBankIsError };\r\n","import { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from '@material-ui/lab/Alert';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\n\nimport { editRequest } from 'store/actions/edit-bank.action';\nimport { requestGetListWithBanks } from 'store/actions/get-list.action';\nimport { IEditBankArguments, IEditBankItem } from 'types/handlers/edit-bank.arguments';\nimport { useStyles } from './styles';\n\ntype PropTypes = {\n  item: IEditBankItem;\n};\n\nconst FormEdit: FC<PropTypes> = ({ item }: PropTypes) => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const { register, handleSubmit, errors } = useForm<IEditBankArguments>();\n\n  const submitHandler = async (data: any, event: any) => {\n    event.preventDefault();\n    // eslint-disable-next-line\n    data.id = item._id;\n    await dispatch(editRequest(data));\n    await dispatch(requestGetListWithBanks());\n  };\n\n  return (\n    <form autoComplete=\"off\" onSubmit={handleSubmit(submitHandler)}>\n      <TextField\n        label=\"Bank name *\"\n        id=\"name\"\n        name=\"name\"\n        type=\"text\"\n        variant=\"outlined\"\n        defaultValue={item.name}\n        inputRef={register({\n          required: true,\n        })}\n      />\n      {errors.name && <Alert severity=\"error\">Bank name is required</Alert>}\n\n      <TextField\n        label=\"Interest rate *\"\n        id=\"interestRate\"\n        name=\"interestRate\"\n        type=\"number\"\n        variant=\"outlined\"\n        defaultValue={item.interestRate}\n        inputRef={register({\n          required: true,\n        })}\n      />\n      {errors.interestRate && <Alert severity=\"error\">Interest rate is required</Alert>}\n\n      <TextField\n        label=\"Maximum loan *\"\n        id=\"maximumLoan\"\n        name=\"maximumLoan\"\n        type=\"number\"\n        variant=\"outlined\"\n        defaultValue={item.maximumLoan}\n        inputRef={register({\n          required: true,\n        })}\n      />\n      {errors.maximumLoan && <Alert severity=\"error\">Maximum loan is required</Alert>}\n\n      <TextField\n        label=\"Minimum down payment *\"\n        id=\"minimumDownPayment\"\n        name=\"minimumDownPayment\"\n        type=\"number\"\n        variant=\"outlined\"\n        defaultValue={item.minimumDownPayment}\n        inputRef={register({\n          required: true,\n        })}\n      />\n      {errors.maximumLoan && <Alert severity=\"error\">Minimum down payment is required</Alert>}\n\n      <TextField\n        label=\"Loan term *\"\n        id=\"loanTerm\"\n        name=\"loanTerm\"\n        type=\"number\"\n        variant=\"outlined\"\n        defaultValue={item.loanTerm}\n        inputRef={register({\n          required: true,\n        })}\n      />\n      {errors.loanTerm && <Alert severity=\"error\">Loan term is required</Alert>}\n\n      <div>\n        <Button\n          variant=\"contained\"\n          color=\"default\"\n          size=\"small\"\n          className={classes.button}\n          startIcon={<SaveIcon />}\n          type=\"submit\"\n        >\n          Save\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport { FormEdit };\n","import { FC, useState } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport { IEditBankItem } from 'types/handlers/edit-bank.arguments';\n\nimport { FormEdit } from './FormEdit';\nimport { useStyles } from './styles';\n\ntype PropTypes = {\n  item: IEditBankItem;\n};\n\nconst ButtonEdit: FC<PropTypes> = ({ item }: PropTypes) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n\n  return (\n    <>\n      <IconButton aria-label=\"edit\" onClick={handleOpen}>\n        <EditIcon />\n      </IconButton>\n\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <h2 id=\"transition-modal-title\">Edit bank info</h2>\n            <FormEdit item={item} />\n          </div>\n        </Fade>\n      </Modal>\n    </>\n  );\n};\n\nexport { ButtonEdit };\n","import { FC } from 'react';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport { ListType } from 'store/types/get-list.types';\n\nimport { ButtonDelete } from './ButtonDelete';\nimport { ButtonEdit } from './ButtonEdit';\nimport { useStyles } from './styles';\n\ntype PropTypes = {\n  list: ListType;\n};\n\n/* eslint-disable */\n\nconst BanksList: FC<PropTypes> = ({ list }: PropTypes) => {\n  const classes = useStyles();\n\n  const listJSX = list.map((item) => (\n    <Accordion key={item._id}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography className={classes.heading}>Bank: {item.name}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Typography>Interest rate: {item.interestRate} %</Typography>\n        <Typography>Maximum loan: {item.maximumLoan} $</Typography>\n        <Typography>Minimum down payment: {item.minimumDownPayment} %</Typography>\n        <Typography>Loan term: {item.loanTerm} months</Typography>\n        <div className={classes.wrapper}>\n          <ButtonDelete data={item._id} />\n          <ButtonEdit item={item} />\n        </div>\n      </AccordionDetails>\n    </Accordion>\n  ));\n\n  return (\n    <div className={classes.root}>\n      <h1>List of the banks</h1>\n      {listJSX}\n    </div>\n  );\n};\n\nexport { BanksList };\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    marginTop: '3rem',\r\n  },\r\n}));\r\n\r\nexport { useStyles };\r\n","import { FC } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\nimport { useStyles } from './style';\r\n\r\ntype PropTypes = {\r\n  handleClick: () => void;\r\n};\r\n\r\nconst ButtonCreate: FC<PropTypes> = ({ handleClick }: PropTypes) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        startIcon={<AddCircleIcon />}\r\n        onClick={handleClick}\r\n      >\r\n        Add bank\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { ButtonCreate };\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    marginTop: '3rem',\r\n  },\r\n  root: {\r\n    color: theme.palette.common.white,\r\n    backgroundColor: theme.palette.error.main,\r\n\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.error.light,\r\n    },\r\n  },\r\n}));\r\n\r\nexport { useStyles };\r\n","import { FC } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { useStyles } from './style';\r\n\r\ntype PropTypes = {\r\n  handleClick: () => void;\r\n};\r\n\r\nconst ButtonCancel: FC<PropTypes> = ({ handleClick }: PropTypes) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <Button\r\n        className={classes.root}\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        onClick={handleClick}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { ButtonCancel };\r\n","import { ApiUrlInfo } from 'data/api/url-info';\r\nimport { ICreationBankArguments } from 'types/handlers/creation-bank.arguments';\r\nimport {\r\n  CREATE_BANK_IS_LOADING,\r\n  CREATE_BANK_IS_SUCCESS,\r\n  CREATE_BANK_IS_ERROR,\r\n  ICreateIsLoading,\r\n  ICreateIsSuccess,\r\n  ICreateIsError,\r\n  ThunkActionType,\r\n  ThunkDispatchType,\r\n} from '../types/create-new-bank.types';\r\n\r\nconst { prefix, banksInfo } = ApiUrlInfo;\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-expressions */\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\n\r\nfunction creationRequest(data: ICreationBankArguments): ThunkActionType {\r\n  return async (dispatch: ThunkDispatchType): Promise<void> => {\r\n    try {\r\n      dispatch(creationIsLoading());\r\n\r\n      const response = await fetch(prefix + banksInfo, {\r\n        method: 'POST',\r\n        cache: 'no-cache',\r\n        headers: { 'Content-Type': 'application/json; charset=UTF-8' },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      response.ok ? dispatch(creationIsSuccess()) : dispatch(creationIsError());\r\n    } catch (e) {\r\n      dispatch(creationIsError());\r\n    }\r\n  };\r\n}\r\n\r\n/* eslint-enable */\r\n\r\nfunction creationIsLoading(): ICreateIsLoading {\r\n  return {\r\n    type: CREATE_BANK_IS_LOADING,\r\n    loading: true,\r\n  };\r\n}\r\n\r\nfunction creationIsSuccess(): ICreateIsSuccess {\r\n  return {\r\n    type: CREATE_BANK_IS_SUCCESS,\r\n    loading: false,\r\n    success: true,\r\n  };\r\n}\r\n\r\nfunction creationIsError(): ICreateIsError {\r\n  return {\r\n    type: CREATE_BANK_IS_ERROR,\r\n    loading: false,\r\n    error: true,\r\n  };\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport { creationRequest, creationIsLoading, creationIsSuccess, creationIsError };\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    margin: theme.spacing(5),\r\n    backgroundColor: theme.palette.grey[300],\r\n  },\r\n  paper: {\r\n    flexGrow: 1,\r\n    height: '100%',\r\n    backgroundColor: 'primary',\r\n  },\r\n  title: {\r\n    margin: theme.spacing(5),\r\n    marginBottom: theme.spacing(10),\r\n  },\r\n  FormTask: {\r\n    textAlign: 'center',\r\n    verticalAlign: 'middle',\r\n    width: '100%',\r\n    '& > div': {\r\n      margin: theme.spacing(1),\r\n      width: '75%',\r\n    },\r\n    '& > button': {\r\n      marginTop: theme.spacing(4),\r\n      marginBottom: theme.spacing(10),\r\n      width: '75%',\r\n      height: '4rem',\r\n    },\r\n    '& > div.MuiAlert-root': {\r\n      display: 'inline-flex',\r\n      width: '75%',\r\n    },\r\n  },\r\n}));\r\n\r\nexport { useStyles };\r\n","import { FC } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport { creationRequest } from 'store/actions/create-new-bank.action';\r\nimport { requestGetListWithBanks } from 'store/actions/get-list.action';\r\nimport { ICreationBankArguments } from 'types/handlers/creation-bank.arguments';\r\nimport { useStyles } from './styles';\r\n\r\n/* eslint-disable */\r\n\r\nconst FormCreateBank: FC = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const { register, handleSubmit, errors } = useForm<ICreationBankArguments>();\r\n\r\n  const submitHandler = async (data: ICreationBankArguments, event: any) => {\r\n    event.preventDefault();\r\n    await dispatch(creationRequest(data));\r\n    await dispatch(requestGetListWithBanks());\r\n    event.target.reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={classes.FormTask} onSubmit={handleSubmit(submitHandler)}>\r\n        <TextField\r\n          label=\"Bank name *\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          type=\"text\"\r\n          variant=\"outlined\"\r\n          inputRef={register({\r\n            required: true,\r\n          })}\r\n        />\r\n        {errors.name && <Alert severity=\"error\">Bank name is required</Alert>}\r\n\r\n        <TextField\r\n          label=\"Interest rate *\"\r\n          id=\"interestRate\"\r\n          name=\"interestRate\"\r\n          type=\"number\"\r\n          variant=\"outlined\"\r\n          inputRef={register({\r\n            required: true,\r\n          })}\r\n        />\r\n        {errors.interestRate && <Alert severity=\"error\">Interest rate is required</Alert>}\r\n\r\n        <TextField\r\n          label=\"Maximum loan *\"\r\n          id=\"maximumLoan\"\r\n          name=\"maximumLoan\"\r\n          type=\"number\"\r\n          variant=\"outlined\"\r\n          inputRef={register({\r\n            required: true,\r\n          })}\r\n        />\r\n        {errors.maximumLoan && <Alert severity=\"error\">Maximum loan is required</Alert>}\r\n\r\n        <TextField\r\n          label=\"Minimum down payment *\"\r\n          id=\"minimumDownPayment\"\r\n          name=\"minimumDownPayment\"\r\n          type=\"number\"\r\n          variant=\"outlined\"\r\n          inputRef={register({\r\n            required: true,\r\n          })}\r\n        />\r\n        {errors.maximumLoan && <Alert severity=\"error\">Minimum down payment is required</Alert>}\r\n\r\n        <TextField\r\n          label=\"Loan term *\"\r\n          id=\"loanTerm\"\r\n          name=\"loanTerm\"\r\n          type=\"number\"\r\n          variant=\"outlined\"\r\n          inputRef={register({\r\n            required: true,\r\n          })}\r\n        />\r\n        {errors.loanTerm && <Alert severity=\"error\">Loan term is required</Alert>}\r\n\r\n        <Button variant=\"contained\" size=\"large\" color=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport { FormCreateBank };\r\n","import { FC } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { FormCreateBank } from './Form';\r\nimport { useStyles } from './styles';\r\n\r\nconst ContainerForm: FC = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Typography component=\"main\" className={classes.container}>\r\n        <Paper className={classes.paper} elevation={2}>\r\n          <Grid container justify=\"center\">\r\n            <Typography variant=\"h4\" component=\"h2\" gutterBottom className={classes.title}>\r\n              Add new bank to the list\r\n            </Typography>\r\n            <FormCreateBank />\r\n          </Grid>\r\n        </Paper>\r\n      </Typography>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport { ContainerForm };\r\n","import { FC, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { requestGetListWithBanks } from 'store/actions/get-list.action';\r\nimport { RootState } from 'store/root.store';\r\nimport { Spinner } from 'components/Spinner/Spinner';\r\n\r\nimport { EmptyList } from './components/List/EmptyList';\r\nimport { BanksList } from './components/List';\r\nimport { ButtonCreate } from './components/ButtonCreate/ButtonCreate';\r\nimport { ButtonCancel } from './components/ButtonCancel/ButtonCancel';\r\nimport { ContainerForm } from './components/FormCreate';\r\n\r\nconst BanksPage: FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect((): any => dispatch(requestGetListWithBanks()), [dispatch]);\r\n  const { loading, payload } = useSelector((state: RootState) => state.list);\r\n\r\n  const [createBank, setCreateBank] = useState<boolean>(false);\r\n\r\n  const handleClick = () => setCreateBank((prevState) => !prevState);\r\n\r\n  const buttons = createBank ? (\r\n    <ButtonCancel handleClick={handleClick} />\r\n  ) : (\r\n    <ButtonCreate handleClick={handleClick} />\r\n  );\r\n\r\n  const list = payload.length > 0 ? <BanksList list={payload} /> : <EmptyList />;\r\n  const form = createBank ? <ContainerForm /> : null;\r\n  const requestProcessing = loading ? <Spinner /> : list;\r\n\r\n  return (\r\n    <>\r\n      {requestProcessing}\r\n      {buttons}\r\n      {form}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BanksPage;\r\n"],"sourceRoot":""}